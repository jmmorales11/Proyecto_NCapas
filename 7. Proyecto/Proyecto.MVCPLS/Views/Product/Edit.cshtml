@model Entities.Product

@{
    ViewBag.Title = "Editar Producto";
}

<div class="form-container">
    <h2>Editar Producto</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.ProductID) <!-- Para mantener el ID del producto -->

        <!-- Mostrar errores globales -->
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(model => model.ProductName, new { @class = "form-control minimal-input" })
            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(model => model.CategoryID, new { @class = "form-control minimal-input", type = "number", min = "1" })
            @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(model => model.UnitPrice, new { @class = "form-control minimal-input", type = "number", step = "0.01" })
            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitsInStock, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(model => model.UnitsInStock, new { @class = "form-control minimal-input", type = "number", min = "0" })
            @Html.ValidationMessageFor(model => model.UnitsInStock, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserID, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(model => model.UserID, new { @class = "form-control minimal-input", type = "number", min = "1" })
            @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
        </div>

        <div class="form-buttons">
            <button type="submit" class="btn minimal-btn" onclick="handleSubmit(event)">Actualizar</button>
            <a href="@Url.Action("List")" class="btn minimal-btn-cancel">Cancelar</a>
        </div>
    }
</div>
<script>// Función para escapar caracteres especiales
    function escapeHTML(str) {
        return str.replace(/[&<>"']/g, function (char) {
            return {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            }[char];
        });
    }

    function handleSubmit(event) {
        event.preventDefault(); // Evitar el envío del formulario

        const productName = escapeHTML(document.getElementById('ProductName').value);
        const categoryID = escapeHTML(document.getElementById('CategoryID').value);
        const unitPrice = escapeHTML(document.getElementById('UnitPrice').value);
        const unitsInStock = escapeHTML(document.getElementById('UnitsInStock').value);
        const userID = escapeHTML(document.getElementById('UserID').value);

        // Asignar los valores escapados a los campos del formulario
        document.getElementById('CategoryName').value = productName;
        document.getElementById('CategoryID').value = categoryID;
        document.getElementById('UnitPrice').value = unitPrice;
        document.getElementById('UnitsInStock').value = unitsInStock;
        document.getElementById('UserID').value = userID;

        // Enviar el formulario
        event.target.form.submit();
    }</script>
<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f7f7f7;
        margin: 0;
        padding: 0;
        height: 100vh; /* Hacer que la altura del cuerpo ocupe toda la pantalla */
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .form-container {
        background-color: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 500px; /* Limitar el ancho máximo del formulario */
    }

    h2 {
        color: #333;
        text-align: center;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-label {
        font-weight: 500;
        color: #555;
        margin-bottom: 5px;
        display: block;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #fff;
        font-size: 14px;
    }

        .form-control:focus {
            border-color: #007bff;
            outline: none;
        }

    .minimal-input {
        margin-top: 5px;
    }

    .form-buttons {
        text-align: center;
        margin-top: 20px;
    }

    .btn {
        padding: 10px 20px;
        font-size: 14px;
        border: none;
        cursor: pointer;
        border-radius: 4px;
        text-decoration: none;
        display: inline-block;
        transition: background-color 0.3s ease;
    }

    .minimal-btn {
        background-color: #007bff;
        color: #fff;
        margin-right: 10px;
    }

        .minimal-btn:hover {
            background-color: #0056b3;
        }
</style>
